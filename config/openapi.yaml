openapi: 3.0.1
info:
  title: SSD Team Strategy Flask APIs
  description: 'This is a description of the API document. You can find out more about Swagger
    at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).'
  version: 0.1.0
servers:
- url: http://127.0.0.1:5000/api
  description: URL can be changed depending on the domain or url that you generate. 
tags:
- name: Auth Microservice
  description: User Credentials and Session Management
- name: Report Microservice
  description: Manage Reports
paths:
  /v1/auth/index:
    get:
      tags:
      - Auth Microservice
      summary: Index
      description: This will allow you to check if authentication token is valid and correct.
      operationId: getAuthIndex
      security:
        - header_auth: []
        - body_auth: []
      responses:
        200:
          description: Request Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseWithUser'
        401:
          description: Not Authenticated or failure
  /v1/auth/register:
    post:
      tags:
      - Auth Microservice
      summary: Register user
      description: Register user using email and password
      operationId: postAuthRegister
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
      responses:
        200:
          description: Registration Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        403:
          description: A vulnerable password.
        409:
          description: Already Exist
        422:
          description: Invalid Input
  /v1/auth/login:
    post:
      tags:
      - Auth Microservice
      summary: Login user
      description: Login user with authentication token
      operationId: postAuthLogin
      requestBody:
        description: Return Auth Token when Login Success
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
        required: true
      responses:
        200:
          description: Registration Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        401:
          description: Invalid credentials
        422:
          description: Invalid input.
  /v1/auth/change_password:
    put:
      tags:
      - Auth Microservice
      summary: Change Password
      description: Change password with authentication token, current password, and new password
      operationId: putAuthChangePassword
      security:
        - header_auth: []
        - body_auth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PassChange'
        required: true
      responses:
        200:
          description: Request Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        401:
          description: Not Authenticated or failure
        403:
          description: A vulnerable password.
        422:
          description: Invalid input.
  /v1/auth/logout:
    delete:
      tags:
      - Auth Microservice
      summary: Logout and change the auth token
      operationId: deleteAuthLogout
      security:
        - header_auth: []
        - body_auth: []
      responses:
        200:
          description: Request Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        401:
          description: Not Authenticated or failure
  /v1/auth/delete_user:
    delete:
      tags:
      - Auth Microservice
      summary: Delete logged in user account
      operationId: deleteAuthDeleteUser
      security:
        - header_auth: []
        - body_auth: []
      responses:
        200:
          description: Request Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        401:
          description: Not Authenticated or failure
  /v1/report/upload:
    post:
      tags:
      - Report Microservice
      summary: Upload a report file
      description: This API about uploading a report.
      operationId: postReportUpload
      security:
        - header_auth: []
        - body_auth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
              - description
              - file
              - name
              properties:
                name:
                  type: string
                description:
                  type: string
                file:
                  type: string
                  format: binary
        required: true
      responses:
        200:
          description: Request Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        401:
          description: Not Authenticated 
        422:
          description: Invalid input.

  /v1/report/list:
    get:
      tags:
      - Report Microservice
      description: To list of all reports of logged in user.
      operationId: getReportList
      security:
        - header_auth: []
        - body_auth: []
      responses:
        200:
          description: Request Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListReportResponse'
        401:
          description: Not Authenticated 
  /v1/report/read/{report_id}:
    get:
      tags:
      - Report Microservice
      summary: Show report details
      description: This API is to read a report.
      operationId: getReportRead
      security:
        - header_auth: []
        - body_auth: []
      parameters:
      - name: report_id
        description: Report ID that is generated when uploading the report. Or, select from the report/list function.
        example: 1
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Request Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListReportResponse'
        401:
          description: Not Authenticated 
        404:
          description: Report not found or invalid.
  /v1/report/download/{report_id}:
    get:
      tags:
      - Report Microservice
      summary: Download a report file
      description: This API is to Download a report.
      operationId: getReportDownload
      security:
        - header_auth: []
        - body_auth: []
      parameters:
      - name: report_id
        description: Report ID that is generated when uploading the report. Or, select from the report/list function.
        example: 1
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Request Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListReportResponse'
        401:
          description: Not Authenticated 
  /v1/report/update_data/{report_id}:
    put:
      tags:
      - Report Microservice
      summary: Update report data
      description: This API is to update a report.
      operationId: putReportUpdateData
      security:
        - header_auth: []
        - body_auth: []
      parameters:
      - name: report_id
        description: Report ID that is generated when uploading the report. Or, select from the report/list function.
        example: 1
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
              - description
              - name
              properties:
                name:
                  type: string
                  description: Report Title that you want to change
                  example: This is the report title.
                description:
                  type: string
                  description: Report Description that you want to change
                  example: This is the report description.
      responses:
        200:
          description: Request Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListReportResponse'
        401:
          description: Not Authenticated 
        422:
          description: Invalid input.
  /v1/report/update_file/{report_id}:
    put:
      tags:
      - Report Microservice
      summary: Update a report file
      description: This API is to update a report.
      operationId: putReportUpdateFile
      security:
        - header_auth: []
        - body_auth: []
      parameters:
      - name: report_id
        description: Report ID that is generated when uploading the report. Or, select from the report/list function.
        example: 1
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - file
              properties:
                file:
                  type: string
                  format: binary
        required: true
      responses:
        200:
          description: Request Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        401:
          description: Not Authenticated 
        422:
          description: Invalid input.
  /v1/report/delete/{report_id}:
    delete:
      tags:
      - Report Microservice
      summary: Delete the specified report
      description: This API is to Delete a report.
      operationId: deleteReport
      security:
        - header_auth: []
        - body_auth: []
      parameters:
      - name: report_id
        description: Report ID that is generated when uploading the report. Or, select from the report/list function.
        example: 1
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Request Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        401:
          description: Not Authenticated 
components:
  schemas:
    Auth:
      type: object
      properties:
        email:
          type: string
          description: This should match the email format.
          example: example@example.com
        password:
          type: string
          description: A weak password, including the leaked passwords, will not be accepted.
          example: this_should_be_a_strong_password
    PassChange:
      type: object
      properties:
        current_password:
          type: string
          description: Current password that you use now
          example: this_should_be_a_strong_password
        new_password:
          type: string
          description: New password that you want to use. A weak password, including the leaked passwords, will not be accepted.
          example: this_should_also_be_a_strong_password
    TokenResponse:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/200'
        response:
          $ref: '#/components/schemas/auth_token'
    SuccessResponse:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/200'
        response:
          $ref: '#/components/schemas/success'
    SuccessResponseWithUser:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/200'
        response:
          $ref: '#/components/schemas/user'
    200:
      type: object
      properties:
        code:
          type: integer
          format: int32
          default: 200
          description: A response code.
    success:
      type: object
      properties:
        message:
          type: string
          description: Message is used when request is successfully operated.
    user:
      type: object
      properties:
        message:
          type: string
          example: Hello Flask Restful Example!
        email:
          type: string
          example: example@example.com
    auth_token:
      type: object
      properties:
        message:
          type: string
          description: Message is used when request is successfully operated.
          example: Login successful. Use this auth_token when you call APIs
        auth_token:
          type: string
          description: This authentication token is necessary when calling most of APIs.
          example: WyI0M2Q1ZjhhNjhhOWU0Nzg0YjExNGE5NmJlNTg1OWU1YiJd.YiCyhQ._tP6VLa5fKbnftUa6AKqzs1RTHY
    ListReportResponse:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/200'
        response:
          $ref: '#/components/schemas/list_report_array'
    list_report_array:
      type: object
      properties:
        id:
          type: integer
          description: report id. This id is needed when read/download/update/delete the report.
          example: 1
        name:
          type: string
          description: report title.
          example: This is the report title.
        description:
          type: string
          description: report description.
          example: This is the report description.
        file_name:
          type: string
          description: file name of the attached report.
          example: example.pdf
        url:
          type: string
          description: the url that the file is stored.
          example: path/to/file
        user:
          type: integer
          description: user who uploaded the report.
          example: 1
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
  securitySchemes:
    header_auth:
      type: apiKey
      in: header
      name: Authentication-Token
    body_auth:
      type: apiKey
      in: query
      name: auth_token
